#ifndef CODE_MATRIX_H_
#define CODE_MATRIX_H_
#include <stdint.h>
/**æÿ’Û‘ÀÀ„≥Ã–Ú

 **/
 typedef struct
  {
    uint16_t numRows;     /**< number of rows of the matrix.     */
    uint16_t numCols;     /**< number of columns of the matrix.  */
    float *pData;     /**< points to the data of the matrix. */
 } Matrix;

 typedef enum
   {
     MATH_SUCCESS = 0,                /**< No error */
     MATH_ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
     MATH_LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
     MATH_SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation. */
     MATH_NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
     MATH_SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is singular and cannot be inverted. */
     MATH_TEST_FAILURE = -6           /**< Test Failed  */
   } res_status;

void Matrix_init(Matrix * S,uint16_t nRows,uint16_t nColumns,float * pData);
res_status Matrix_add(const Matrix * pSrcA,const Matrix * pSrcB,Matrix * pDst);
res_status Matrix_sub(const Matrix * pSrcA,const Matrix * pSrcB,Matrix * pDst);
res_status Matrix_mult(const Matrix * pSrcA,const Matrix* pSrcB, Matrix * pDst);
res_status Matrix_trans(const Matrix * pSrc,Matrix * pDst);
res_status Matrix_inverse(const Matrix * pSrc,Matrix * pDst);

#endif /* CODE_MATRIX_H_ */
